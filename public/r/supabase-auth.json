{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "supabase-auth",
  "type": "registry:block",
  "title": "Supabase Auth",
  "description": "Complete authentication system with Supabase including sign in/up, password reset, OTP verification, magic links, and OAuth providers (Google, GitHub). Features passwordless options, comprehensive error handling, and responsive UI.",
  "dependencies": [
    "@supabase/ssr",
    "@supabase/supabase-js",
    "next",
    "zod",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "label",
    "alert",
    "input-otp"
  ],
  "files": [
    {
      "path": "registry/supabase-auth/actions/auth.ts",
      "content": "'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { z } from 'zod'\n\nimport { createClient } from '@/lib/supabase/server'\n\n// Update schema to only include email\nconst authSchema = z.object({\n  email: z.string().email(),\n})\n\n// Add a schema for email and password\nconst authWithPasswordSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, { message: \"Password is required\" }),\n})\n\n// Replace signin and signup with a single magic link function\nexport async function signInWithMagicLink(formData: FormData) {\n  'use server'\n  \n  const supabase = await createClient()\n\n  // Parse and validate the email\n  const result = authSchema.safeParse({\n    email: formData.get('email'),\n  })\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error)\n    redirect('/signin?error=validation&message=Invalid email format.')\n  }\n\n  const { error } = await supabase.auth.signInWithOtp({\n    email: result.data.email,\n    options: {\n      shouldCreateUser: true,\n      emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}`,\n    },\n  })\n\n  if (error) {\n    console.log(\"magic-link-error\", error)\n    if (error.code === 'over_email_send_rate_limit' && error.message) {\n      redirect(`/signin?error=rate_limit&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`)\n    }\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect(`/verify-email?email=${result.data.email}`)\n}\n\nexport async function signInWithGoogle() {\n  'use server'\n\n  const supabase = await createClient()\n  \n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'google',\n    options: {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`\n    }\n  })\n\n  if (error) {\n    console.log(\"google-signin-error\", error)\n    redirect('/error')\n  }\n\n  if (data.url) {\n    redirect(data.url)\n  }\n\n  revalidatePath('/', 'layout')\n}\n\nexport async function signInWithGithub() {\n  'use server'\n  \n  const supabase = await createClient()\n  \n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n    options: {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`\n    }\n  })\n\n  if (error) {\n    console.log(\"github-signin-error\", error)\n    redirect('/error')\n  }\n\n  if (data.url) {\n    redirect(data.url)\n  }\n\n  revalidatePath('/', 'layout')\n}\n\n// Add OTP specific function\nexport async function signInWithOTP(formData: FormData) {\n  'use server'\n  \n  const supabase = await createClient()\n\n  const result = authSchema.safeParse({\n    email: formData.get('email'),\n  })\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error)\n    redirect('/signin?error=validation&message=Invalid email format.')\n  }\n\n  const { error } = await supabase.auth.signInWithOtp({\n    email: result.data.email,\n    options: {\n      shouldCreateUser: true,\n    },\n  })\n\n  if (error) {\n    console.log(\"otp-error\", error)\n    if (error.code === 'over_email_send_rate_limit' && error.message) {\n      redirect(`/signin?error=rate_limit&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`)\n    }\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect(`/verify-otp?email=${result.data.email}`)\n}\n\nexport async function signInWithPassword(formData: FormData) {\n  'use server'\n\n  const supabase = await createClient()\n\n  const result = authWithPasswordSchema.safeParse({\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n  const next = formData.get('next') as string | null;\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error)\n    // Construct a more user-friendly error message\n    const errorMessages = result.error.errors.map(e => e.message).join(', ')\n    let redirectUrl = `/signin/password?error=validation&message=${encodeURIComponent(errorMessages)}`;\n    if (next) {\n      redirectUrl += `&next=${encodeURIComponent(next)}`;\n    }\n    redirect(redirectUrl);\n  }\n\n  const { error } = await supabase.auth.signInWithPassword({\n    email: result.data.email,\n    password: result.data.password,\n  })\n  if (error) {\n    console.log(\"password-signin-error\", error)\n    let redirectUrl = `/signin/password?error=auth&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`;\n    if (next) {\n      redirectUrl += `&next=${encodeURIComponent(next)}`;\n    }\n    redirect(redirectUrl);\n  }\n\n  revalidatePath('/', 'layout')\n  if (next) {\n    redirect(next);\n  } else {\n    redirect('/'); // Default redirect if next is not present\n  }\n}\n\nexport async function signUpWithPassword(formData: FormData) {\n  'use server'\n\n  const supabase = await createClient()\n\n  const result = authWithPasswordSchema.safeParse({\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error)\n    const errorMessages = result.error.errors.map(e => e.message).join(', ')\n    redirect(`/signup/password?error=validation&message=${encodeURIComponent(errorMessages)}`)\n  }\n\n  const { error } = await supabase.auth.signUp({\n    email: result.data.email,\n    password: result.data.password,\n    options: {\n      emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n    }\n  })\n\n  if (error) {\n    console.log(\"password-signup-error\", error)\n    redirect(`/signup/password?error=auth&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`)\n  }\n\n  revalidatePath('/', 'layout')\n  // Redirect to a page that informs the user to check their email for verification\n  redirect(`/verify-email?email=${result.data.email}&type=signup`)\n}\n\nexport async function requestPasswordReset(formData: FormData) {\n  'use server'\n\n  const supabase = await createClient()\n\n  const result = authSchema.safeParse({\n    email: formData.get('email'),\n  })\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error)\n    redirect(`/signin/password/reset?error=validation&message=Invalid email format.&email=${encodeURIComponent(formData.get('email') as string || '')}`)\n  }\n\n  const { error } = await supabase.auth.resetPasswordForEmail(result.data.email, {\n    redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback?next=/update-password`, // We'll create /update-password page next\n  })\n\n  if (error) {\n    console.log(\"password-reset-request-error\", error)\n    // It's good practice to not confirm if an email address is registered or not during password reset for security.\n    // However, Supabase might return specific errors we can handle, like rate limits.\n    if (error.code === 'over_email_send_rate_limit' && error.message) {\n      redirect(`/signin/password/reset?error=rate_limit&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`)\n    }\n    // To avoid user enumeration, we might want to show the same success message even if the email doesn't exist.\n    // For now, we'll redirect to the verify-email page as if successful.\n    // redirect(`/signin/password/reset?error=auth&message=${encodeURIComponent(error.message)}&email=${encodeURIComponent(result.data.email)}`)\n  }\n\n  // Redirect to a page informing the user to check their email for the password reset link.\n  redirect(`/update-password/check-email?email=${encodeURIComponent(result.data.email)}`)\n}\n\nconst updatePasswordSchema = z.object({\n  password: z.string().min(6, { message: \"Password must be at least 6 characters long\" }),\n  confirmPassword: z.string(),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"], // path of error\n});\n\nexport async function updateUserPassword(formData: FormData) {\n  'use server'\n\n  const supabase = await createClient()\n\n  const result = updatePasswordSchema.safeParse({\n    password: formData.get('password'),\n    confirmPassword: formData.get('confirmPassword'),\n  })\n\n  if (!result.success) {\n    console.log(\"validation-error\", result.error.flatten().fieldErrors)\n    const errorMessages = result.error.errors.map(e => e.message).join(', ')\n    // It's important to redirect back to the update-password page with the error\n    redirect(`/update-password?error=validation_error&message=${encodeURIComponent(errorMessages)}`)\n  }\n\n  const { error } = await supabase.auth.updateUser({\n    password: result.data.password,\n  })\n\n  if (error) {\n    console.log(\"update-password-error\", error)\n    redirect(`/update-password?error=update_error&message=${encodeURIComponent(error.message)}`)\n  }\n\n  // Password updated successfully, redirect to signin or home page\n  // It might be good to revalidate path if user details are displayed somewhere that might change upon password update, though less common.\n  // revalidatePath('/', 'layout') \n  redirect('/signin/password?message=Password updated successfully. Please sign in.')\n}\n\nexport async function signOut() {\n  'use server'\n\n  const supabase = await createClient()\n  await supabase.auth.signOut()\n  revalidatePath('/') // It's good to revalidate the path after sign out\n  redirect('/')\n}",
      "type": "registry:lib",
      "target": "actions/auth.ts"
    },
    {
      "path": "registry/supabase-auth/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n",
      "type": "registry:lib",
      "target": "lib/supabase/client.ts"
    },
    {
      "path": "registry/supabase-auth/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n",
      "type": "registry:lib",
      "target": "lib/supabase/server.ts"
    },
    {
      "path": "registry/supabase-auth/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/auth/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n",
      "type": "registry:lib",
      "target": "lib/supabase/middleware.ts"
    },
    {
      "path": "registry/supabase-auth/(Auth)/layout.tsx",
      "content": "import { Bird } from \"lucide-react\";\n\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <main className=\"flex min-h-screen w-full flex-col items-center justify-center p-4\">\n        <Bird className=\"size-10 shrink-0\" />\n        <h1 className=\"text-2xl font-bold\">App Name</h1>\n        <p className=\"text-sm text-muted-foreground\">\n          This is an app description.\n        </p>\n      {children}\n    </main>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/(auth)/layout.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/signin/page.tsx",
      "content": "import Link from 'next/link';\nimport { signInWithMagicLink, signInWithGoogle, signInWithGithub, signInWithOTP } from '@/actions/auth';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle, Mail } from \"lucide-react\";\n\nexport default async function signinPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const {\n    error,\n    message,\n    email,\n    next: nextParam,\n  } = await searchParams;\n\n  const next = typeof nextParam === 'string' ? nextParam : null;\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n\n        {/* card header */}\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your account\n          </CardDescription>\n        </CardHeader>\n\n        {/* card content */}\n        <CardContent className=\"space-y-4\">\n\n          {/* social buttons */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* google button */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={signInWithGoogle}\n            >\n              <svg className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"github\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n              </svg>\n              Google\n            </Button>\n\n            {/* github button */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={signInWithGithub}\n            >\n              <svg\n                className=\"mr-2 h-4 w-4\"\n                aria-hidden=\"true\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n              >\n                <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n              </svg>\n              GitHub\n            </Button>\n          </div>\n\n          {/* or */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-card px-2 text-muted-foreground\">\n                Or\n              </span>\n            </div>\n          </div>\n\n          {/* email form */}  \n          <form >\n            {next && <input type=\"hidden\" name=\"next\" value={next} />}\n            <div className=\"space-y-4 mb-6 \">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  placeholder=\"m@example.com\" \n                  type=\"email\" \n                  name=\"email\"\n                  required \n                />\n              </div>\n\n              {/* passwordless option buttons */}\n              <div className=\"flex flex-row gap-2 w-full\">\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithMagicLink}\n                >\n                  Send Magic Link\n                </Button>\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithOTP}\n                >\n                  Send OTP Code\n                </Button>\n              </div>\n            </div>\n          </form>\n\n        {/* passwordless option alert */}\n        <Alert variant={\"default\"} className=\"bg-secondary/50 border-none\">\n          <Mail className=\"\" />\n          <AlertTitle className=\"text-sm\">Passwordless Option</AlertTitle>\n          <AlertDescription className=\"pt-2 space-y-2\">\n          <span>\n            We recomend selecting a passwordless option. If you insist on using a password, {' '}\n            <Link\n              href={next ? `/signin/password?next=${encodeURIComponent(next)}` : \"/signin/password\"}\n              className=\"text-primary underline hover:text-primary/80 transition-colors\"\n            >\n              continue here.\n            </Link>\n          </span>\n          </AlertDescription>\n        </Alert>\n\n        {/* no account sign up link */}\n        <div className=\"text-center text-sm text-muted-foreground flex flex-row items-center justify-center gap-2\">\n          No account? {' '}\n          <Link href=\"/signup\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n            Sign up\n          </Link>\n        </div>\n        </CardContent>\n\n        {/* error alert */}\n        {error && message && (\n        <CardFooter>\n            <Alert variant={\"default\"} className=\"bg-secondary/50\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle className=\"text-sm\">{error === \"rate_limit\" ? \"Slow down there!\" : \"Uh oh!\"}</AlertTitle>\n              <AlertDescription className=\"pt-2 space-y-2\">\n                {typeof message === 'string' ? <span>{decodeURIComponent(message)}</span> : 'An unexpected error occurred.'}\n                {error === \"rate_limit\" && typeof email === 'string' && (\n                  <>\n                    <span className=\"\"> Please wait before trying again with:</span>\n                    <p className=\"font-bold\">{decodeURIComponent(email)}</p>\n                  </>\n                )}\n              </AlertDescription>\n            </Alert>\n        </CardFooter>\n        )}\n      </Card>\n    </div>\n  );\n};",
      "type": "registry:page",
      "target": "app/(auth)/signin/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/signin/password/page.tsx",
      "content": "import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, ArrowLeft, Mail } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { signInWithPassword } from \"@/actions/auth\";\n\nexport default async function PasswordPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { error, message, email, next: nextParam } = await searchParams;\n  const next = typeof nextParam === 'string' ? nextParam : null;\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n            <Link href=\"/signin\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              back to passwordless options\n            </Link>\n            <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your account\n          </CardDescription>\n          {(!error && message) && (\n            <Alert variant={\"default\"} className=\"mt-4 border-none text-green-700 bg-green-50 dark:bg-green-950 dark:text-green-500\">\n              <AlertTitle className=\"text-sm font-semibold\">Success!</AlertTitle>\n              <AlertDescription className=\"text-xs text-green-700 dark:text-green-500\">\n                {typeof message === 'string' ? decodeURIComponent(message) : 'Action completed successfully.'}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n\n            <form>\n                {next && <input type=\"hidden\" name=\"next\" value={next} />}\n                <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input id=\"email\" placeholder=\"m@example.com\" type=\"email\" name=\"email\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <div className=\"flex flex-row items-center gap-2 justify-between\">\n                        <Label htmlFor=\"password\">Password</Label>\n                        <Link href=\"/signin/password/reset\" className=\"text-xs text-muted-foreground\">Forgot password?</Link>\n                        </div>\n                        <Input id=\"password\" placeholder=\"password\" type=\"password\" name=\"password\" required />\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithPassword}\n                >\n                  Sign in\n                </Button>\n                </div>\n                </div>\n\n            </form>\n\n            <Alert variant={\"default\"} className=\"border-none\">\n          <Mail className=\"\" />\n          <AlertTitle className=\"text-sm\">Passwordless Option</AlertTitle>\n          <AlertDescription className=\"pt-2 space-y-2\">\n          <span>\n            We recomend using a <Link\n              href=\"/signin\"\n              className=\"text-primary underline hover:text-primary/80 transition-colors\"\n            >\n              passwordless option.\n            </Link> \n          </span>\n          </AlertDescription>\n        </Alert>\n\n                {/* no account sign up link */}\n                <div className=\"text-center text-sm text-muted-foreground flex flex-row items-center justify-center gap-2\">\n          No account? {' '}\n          <Link href=\"/signup\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n            Sign up\n          </Link>\n        </div>\n        </CardContent>\n\n        {(error && message) && (\n          <CardFooter>\n            <Alert variant={\"destructive\"} className=\"\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle className=\"text-sm\">{error === \"rate_limit\" ? \"Slow down there!\" : \"Uh oh!\"}</AlertTitle>\n              <AlertDescription className=\"pt-2 space-y-2\">\n                {typeof message === 'string' ? <span>{decodeURIComponent(message)}</span> : 'An unexpected error occurred.'}\n                {error === \"rate_limit\" && typeof email === 'string' && (\n                  <>\n                    <span className=\"\"> Please wait before trying again with:</span>\n                    <p className=\"font-bold\">{decodeURIComponent(email)}</p>\n                  </>\n                )}\n              </AlertDescription>\n            </Alert>\n          </CardFooter>\n        )}\n      </Card>\n\n    </div>\n  )\n}",
      "type": "registry:page",
      "target": "app/(auth)/signin/password/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/signin/password/reset/page.tsx",
      "content": "// TODO: Add a password reset page\n\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, ArrowLeft, Mail } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { signInWithMagicLink, requestPasswordReset } from \"@/actions/auth\";\n\nexport default async function PasswordPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { error, message, email } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n            <Link href=\"/signin\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              back to passwordless options\n            </Link>\n            <CardTitle className=\"text-2xl font-bold text-center\">Reset Password</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your email to reset your password\n          </CardDescription>\n        </CardHeader>\n\n        {/* card content */}\n        <CardContent className=\"space-y-4\">\n\n            <form>\n                <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input id=\"email\" placeholder=\"m@example.com\" type=\"email\" name=\"email\" required />\n                    </div>\n\n                    <div className=\"flex flex-row gap-2 w-full\">\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={requestPasswordReset}\n                >\n                  Reset Password\n                </Button>\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithMagicLink}\n                >\n                  Send Magic Link\n                </Button>\n                </div>\n                </div>\n\n            </form>\n\n            <Alert variant={\"default\"} className=\"border-none\">\n          <Mail className=\"\" />\n          <AlertTitle className=\"text-sm\">One Time Link</AlertTitle>\n          <AlertDescription className=\"pt-2 space-y-2\">\n          <span>\n            We&apos;ll email you a one time link to access your account.\n          </span>\n          </AlertDescription>\n        </Alert>\n\n                {/* no account sign up link */}\n                <div className=\"text-center text-sm text-muted-foreground flex flex-row items-center justify-center gap-2\">\n          No account? {' '}\n          <Link href=\"/signup\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n            Sign up\n          </Link>\n        </div>\n        </CardContent>\n\n        {error && message && (\n        <CardFooter>\n            <Alert variant={\"destructive\"} className=\"\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle className=\"text-sm\">{error === \"rate_limit\" ? \"Slow down there!\" : \"Uh oh!\"}</AlertTitle>\n              <AlertDescription className=\"pt-2 space-y-2\">\n                {typeof message === 'string' ? <span>{decodeURIComponent(message)}</span> : 'An unexpected error occurred.'}\n                {error === \"rate_limit\" && typeof email === 'string' && (\n                  <>\n                    <span className=\"\"> Please wait before trying again with:</span>\n                    <p className=\"font-bold\">{decodeURIComponent(email)}</p>\n                  </>\n                )}\n              </AlertDescription>\n            </Alert>\n        </CardFooter>   \n        )}\n      </Card>\n\n    </div>\n  )\n}",
      "type": "registry:page",
      "target": "app/(auth)/signin/password/reset/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/signup/page.tsx",
      "content": "import Link from 'next/link';\nimport { signInWithGoogle, signInWithGithub, signInWithOTP, signInWithMagicLink } from '@/actions/auth'; // Assuming you'll create signUpWithPassword\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle, Mail } from \"lucide-react\";\n\nexport default async function SignupPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const {\n    error,\n    message,\n    email,\n  } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n\n        {/* card header */}\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Create an account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your details below to create your account\n          </CardDescription>\n        </CardHeader>\n\n        {/* card content */}\n        <CardContent className=\"space-y-4\">\n\n          {/* social buttons */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* google button */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={signInWithGoogle} // Assuming same action for social signup\n            >\n              <svg className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"google\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n              </svg>\n              Google\n            </Button>\n\n            {/* github button */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={signInWithGithub} // Assuming same action for social signup\n            >\n              <svg\n                className=\"mr-2 h-4 w-4\"\n                aria-hidden=\"true\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n              >\n                <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n              </svg>\n              GitHub\n            </Button>\n          </div>\n\n          {/* or */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-card px-2 text-muted-foreground\">\n                Or\n              </span>\n            </div>\n          </div>\n\n          {/* email and password form */}  \n          <form>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  placeholder=\"m@example.com\" \n                  type=\"email\" \n                  name=\"email\"\n                  required \n                />\n              </div>\n {/* passwordless option buttons */}\n <div className=\"flex flex-row gap-2 w-full\">\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithMagicLink}\n                >\n                  Send Magic Link\n                </Button>\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1\"\n                  formAction={signInWithOTP}\n                >\n                  Send OTP Code\n                </Button>\n              </div>\n            </div>\n          </form>\n\n                  {/* passwordless option alert */}\n        <Alert variant={\"default\"} className=\"bg-secondary/50 border-none\">\n          <Mail className=\"\" />\n          <AlertTitle className=\"text-sm\">Password Option</AlertTitle>\n          <AlertDescription className=\"pt-2 space-y-2\">\n          <span>\n            We recomend selecting a passwordless option. If you insist on using a password, {' '}\n            <Link\n              href=\"/signup/password\"\n              className=\"text-primary underline hover:text-primary/80 transition-colors\"\n            >\n              continue here.\n            </Link>\n          </span>\n          </AlertDescription>\n        </Alert>\n\n        {/* already have an account link */}\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Already have an account?{' '}\n          <Link href=\"/signin\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n            Sign in\n          </Link>\n        </div>\n        </CardContent>\n\n        {/* error alert */}\n        {error && message && (\n        <CardFooter>\n            <Alert variant={\"destructive\"} className=\"\"> {/* Changed to destructive for signup errors initially */}\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle className=\"text-sm\">{error === \"rate_limit\" ? \"Slow down there!\" : \"Uh oh!\"}</AlertTitle>\n              <AlertDescription className=\"pt-2 space-y-2\">\n                {typeof message === 'string' ? <span>{decodeURIComponent(message)}</span> : 'An unexpected error occurred.'}\n                {error === \"rate_limit\" && typeof email === 'string' && (\n                  <>\n                    <span className=\"\"> Please wait before trying again with:</span>\n                    <p className=\"font-bold\">{decodeURIComponent(email)}</p>\n                  </>\n                )}\n              </AlertDescription>\n            </Alert>\n        </CardFooter>\n        )}\n      </Card>\n    </div>\n  );\n};\n",
      "type": "registry:page",
      "target": "app/(auth)/signup/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/signup/password/page.tsx",
      "content": "import Link from 'next/link';\nimport { signUpWithPassword } from '@/actions/auth'; // Changed from signInWithPassword\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle, ArrowLeft, Mail } from \"lucide-react\";\n\nexport default async function SignupPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const {\n    error,\n    message,\n    email,\n  } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n            <Link href=\"/signup\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              back to passwordless options\n            </Link>\n          <CardTitle className=\"text-2xl font-bold text-center\">Create an account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your details below to create your account\n          </CardDescription>\n        </CardHeader>\n\n        {/* card content */}\n        <CardContent className=\"space-y-4\">\n\n          {/* email and password form */}  \n          <form>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  placeholder=\"m@example.com\" \n                  type=\"email\" \n                  name=\"email\"\n                  required \n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input \n                  id=\"password\" \n                  placeholder=\"password\" \n                  type=\"password\" \n                  name=\"password\"\n                  required \n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Confirm Password</Label>\n                <Input \n                  id=\"password\" \n                  placeholder=\"password\" \n                  type=\"password\" \n                  name=\"password\"\n                  required \n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                variant=\"default\"\n                className=\"w-full\"\n                formAction={signUpWithPassword} // Changed from signInWithPassword\n              >\n                Sign Up\n              </Button>\n            </div>\n          </form>\n\n          {/* passwordless option alert */}\n          <Alert variant={\"default\"} className=\"bg-secondary/50 border-none\">\n            <Mail className=\"\" />\n            <AlertTitle className=\"text-sm\">Password Option</AlertTitle>\n            <AlertDescription className=\"pt-2 space-y-2\">\n            <span>\n              We recomend using a <Link\n                href=\"/signup\"\n                className=\"text-primary underline hover:text-primary/80 transition-colors\"\n              >\n                passwordless option.\n              </Link> \n            </span>\n            </AlertDescription>\n          </Alert>\n\n        {/* already have an account link */}\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Already have an account?{' '}\n          <Link href=\"/signin\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n            Sign in\n          </Link>\n        </div>\n        </CardContent>\n\n        {/* error alert */}\n        {error && message && (\n        <CardFooter>\n            <Alert variant={\"destructive\"} className=\"\"> {/* Changed to destructive for signup errors initially */}\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle className=\"text-sm\">{error === \"rate_limit\" ? \"Slow down there!\" : \"Uh oh!\"}</AlertTitle>\n              <AlertDescription className=\"pt-2 space-y-2\">\n                {typeof message === 'string' ? <span>{decodeURIComponent(message)}</span> : 'An unexpected error occurred.'}\n                {error === \"rate_limit\" && typeof email === 'string' && (\n                  <>\n                    <span className=\"\"> Please wait before trying again with:</span>\n                    <p className=\"font-bold\">{decodeURIComponent(email)}</p>\n                  </>\n                )}\n              </AlertDescription>\n            </Alert>\n        </CardFooter>\n        )}\n        \n      </Card>\n    </div>\n  );\n};\n",
      "type": "registry:page",
      "target": "app/(auth)/signup/password/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/verify-email/page.tsx",
      "content": "\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\n\nimport Link from \"next/link\";\nimport { signInWithMagicLink } from '@/actions/auth';\nimport { ArrowLeft, Mail, RotateCcw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n\nexport default async function VerifyEmailPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const { email } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n\n        {/* card header */}\n        <CardHeader className=\"space-y-1\">\n        <Link href=\"/signin\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              back to signin\n            </Link>\n          <CardTitle className=\"text-2xl font-bold text-center\">Verify your email</CardTitle>\n          <CardDescription className=\"text-center\">\n            Check your email for a verification link.\n          </CardDescription>\n        </CardHeader>\n\n        {/* card content */}\n        <CardContent className=\"\">\n        <div className=\"bg-secondary/50 p-6 rounded-lg mb-6\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"h-12 w-12 rounded-full bg-secondary flex items-center justify-center\">\n            <Mail className=\"h-6 w-6\" />\n          </div>\n        </div>\n        <p className=\"text-center mb-2\">We&apos;ve sent a verification link to:</p>\n        <p className=\"text-center font-medium mb-4\">{email}</p>\n        <p className=\"text-center text-muted-foreground text-sm\">\n          Please check your email and click the verification link to continue.\n        </p>\n      </div>\n\n\n        {/* resend verification link button */}\n        <div className=\"flex justify-center items-center\">\n        <Button variant=\"default\" className=\"\" formAction={signInWithMagicLink}>\n          <RotateCcw className=\"h-4 w-4\" />Resend Verification Link \n        </Button></div>\n        </CardContent>\n\n        {/* no account sign up link */}\n        <CardFooter className=\"flex flex-row items-center justify-center\">\n          <div className=\"text-center text-sm text-muted-foreground flex flex-row items-center justify-center gap-2\">\n            Need help?{' '}\n            <Link href=\"/support\" className=\"text-primary hover:underline hover:text-primary/80 transition-colors\">\n              Contact support\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/(auth)/verify-email/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/verify-otp/page.tsx",
      "content": "import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\nimport { ArrowLeft, KeyRound } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { createClient } from '@/lib/supabase/server';\nimport { redirect } from 'next/navigation';\n\n\nexport default async function VerifyOTPPage({   searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const { email } = await searchParams\n\n  async function verifyOTP(formData: FormData) {\n    'use server'\n    \n    const supabase = await createClient()\n    const token = formData.get('token') as string\n    \n    const { error } = await supabase.auth.verifyOtp({\n      email: email as string,\n      token,\n      type: 'email'\n    })\n\n    if (error) {\n      console.log(\"otp-verification-error\", error)\n      redirect('/error')\n    }\n\n    redirect('/')\n  }\n\n  async function resendOTP() {\n    'use server'\n    console.log(\"Resend OTP to:\", email)\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <Link href=\"/signin\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            back to signin\n          </Link>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Verify OTP\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter the code we sent to your email\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"\">\n          <div className=\"flex flex-col gap-4\">\n          <div className=\"bg-secondary/50 p-6 rounded-lg\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"h-12 w-12 rounded-full bg-secondary flex items-center justify-center\">\n                <KeyRound className=\"h-6 w-6\" />\n              </div>\n            </div>\n            <p className=\"text-center mb-2\">Enter the 6-digit code sent to:</p>\n            <p className=\"text-center font-medium mb-4\">{email}</p>\n            <p className=\"text-center text-xs text-muted-foreground px-6\">\n                Didn&apos;t receive a code? The code will expire in 10 minutes.\n              </p>\n          </div>\n          <form>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-center mb-8 mt-4\">\n                <InputOTP maxLength={6} name=\"token\">\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} />\n                    <InputOTPSlot index={1} />\n                    <InputOTPSlot index={2} />\n                  </InputOTPGroup>\n                  <InputOTPSeparator className=\"text-border\" />\n                  <InputOTPGroup>\n                    <InputOTPSlot index={3} />\n                    <InputOTPSlot index={4} />\n                    <InputOTPSlot index={5} />\n                  </InputOTPGroup>\n                </InputOTP>\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                formAction={verifyOTP}\n              >\n                Verify Code\n              </Button>\n            </div>\n          </form>\n          <form action={resendOTP} className=\"\">\n            <Button \n              type=\"submit\" \n              variant=\"outline\"\n              className=\"w-full\"\n            >\n              Resend Code\n            </Button>\n          </form>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex flex-row items-center justify-center\">\n          <div className=\"text-center text-sm text-muted-foreground flex flex-row items-center justify-center gap-2\">\n            Need help?{' '}\n            <Link href=\"/support\" className=\"text-primary underline hover:text-primary/80 transition-colors\">\n              Contact support\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}",
      "type": "registry:page",
      "target": "app/(auth)/verify-otp/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/update-password/page.tsx",
      "content": "import { updateUserPassword } from '@/actions/auth'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { AlertCircle } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default async function UpdatePasswordPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { error, message } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Update Your Password</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your new password below.\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          <form action={updateUserPassword}>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">New Password</Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  minLength={6} // Example: enforce a minimum password length\n                  placeholder=\"••••••••\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  minLength={6}\n                  placeholder=\"••••••••\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Update Password\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n\n        {error && message && (\n          <CardFooter>\n            <Alert variant={error === 'validation_error' ? 'destructive' : 'destructive'} className=\"w-full\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>\n                {error === 'validation_error' ? 'Invalid Input' : 'Error Updating Password'}\n              </AlertTitle>\n              <AlertDescription>\n                {typeof message === 'string' ? (\n                  decodeURIComponent(message)\n                ) : (\n                  'An unexpected error occurred. Please try again.'\n                )}\n              </AlertDescription>\n            </Alert>\n          </CardFooter>\n        )}\n        <CardFooter className=\"flex flex-col items-center justify-center text-sm\">\n            <p className=\"text-muted-foreground\">\n                Remembered your password?{' '}\n                <Link href=\"/signin\" className=\"text-primary hover:underline\">\n                    Sign In\n                </Link>\n            </p>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n} ",
      "type": "registry:page",
      "target": "app/(auth)/update-password/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/update-password/check-email/page.tsx",
      "content": "import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Mail, RotateCcw } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { requestPasswordReset } from '@/actions/auth'; // For resend functionality\n\nexport default async function CheckEmailForPasswordResetPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n\n  const { email } = await searchParams\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <Link href=\"/signin/password/reset\" className=\"text-sm text-muted-foreground flex flex-row items-center gap-2 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Password Reset\n          </Link>\n          <CardTitle className=\"text-2xl font-bold text-center\">Check Your Email</CardTitle>\n          <CardDescription className=\"text-center\">\n            We&apos;ve sent a password reset link to your email address.\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-secondary/50 p-6 rounded-lg\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"h-12 w-12 rounded-full bg-secondary flex items-center justify-center\">\n                <Mail className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n            <p className=\"text-center mb-2\">A password reset link has been sent to:</p>\n            <p className=\"text-center font-medium text-lg mb-4 break-all\">{email ? decodeURIComponent(email as string) : \"your email address\"}</p>\n            <p className=\"text-center text-muted-foreground text-sm\">\n              Please check your inbox (and spam folder) and click the link to reset your password.\n            </p>\n          </div>\n\n          <form action={requestPasswordReset} className=\"flex flex-col items-center\">\n            <input type=\"hidden\" name=\"email\" value={email ? decodeURIComponent(email as string) : ''} />\n           {/* TODO: add resend button functionality */}\n            <Button variant=\"default\" className=\"\">\n              <RotateCcw className=\"h-4 w-4\" />\n              Resend Password Reset Link\n            </Button>\n          </form>\n        </CardContent>\n        <CardFooter className=\"flex flex-col items-center justify-center text-sm\">\n            <p className=\"text-muted-foreground\">\n                Opened the link and updated your password?{' '}\n                <Link href=\"/support\" className=\"text-primary hover:underline hover:text-primary/80 transition-colors\">\n                    Sign In\n                </Link>\n            </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(auth)/update-password/check-email/page.tsx"
    },
    {
      "path": "registry/supabase-auth/(Auth)/auth/callback/route.ts",
      "content": "import { type EmailOtpType } from '@supabase/supabase-js'\nimport { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url)\n  const supabase = await createClient()\n  const next = requestUrl.searchParams.get('next') ?? '/'\n\n  // OAuth callback handling & PKCE code exchange (e.g. password recovery, OAuth)\n  const code = requestUrl.searchParams.get('code')\n  if (code) {\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (error) {\n      console.error(\"Code exchange error:\", error)\n      // Optionally, redirect to a more specific error page or include error info\n      return NextResponse.redirect(new URL('/error?source=code_exchange', requestUrl.origin))\n    }\n    return NextResponse.redirect(new URL(next, requestUrl.origin))\n  }\n\n  // Other OTP verification handling (e.g., magiclink without PKCE, older signup links if they use token_hash)\n  const token_hash = requestUrl.searchParams.get('token_hash')\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\n\n  if (token_hash && type && (type === 'magiclink' || type === 'recovery' || type === 'signup')) {\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n\n    if (error) {\n      console.error(`${type} verification error:`, error)\n      return NextResponse.redirect(new URL('/error?source=otp_verify', requestUrl.origin))\n    }\n    return NextResponse.redirect(new URL(next, requestUrl.origin))\n  }\n\n  console.warn(\"Callback received with unhandled parameters:\", requestUrl.searchParams.toString())\n  return NextResponse.redirect(new URL('/error?source=unknown_callback', requestUrl.origin))\n}",
      "type": "registry:file",
      "target": "app/(auth)/auth/callback/route.ts"
    }
  ]
}