{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "app-sidebar",
  "type": "registry:block",
  "title": "App Sidebar",
  "description": "A comprehensive application sidebar with authentication, user profile management, theme switching, and dynamic breadcrumbs. Features Supabase integration, responsive design, and customizable navigation items with action buttons.",
  "dependencies": [
    "@supabase/ssr",
    "next",
    "next-themes",
    "lucide-react"
  ],
  "registryDependencies": [
    "sidebar",
    "dropdown-menu",
    "avatar",
    "card",
    "breadcrumb"
  ],
  "files": [
    {
      "path": "registry/app-sidebar/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n} ",
      "type": "registry:lib",
      "target": "lib/supabase/client.ts"
    },
    {
      "path": "registry/app-sidebar/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n} ",
      "type": "registry:lib",
      "target": "lib/supabase/server.ts"
    },
    {
      "path": "registry/app-sidebar/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/auth/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n} ",
      "type": "registry:lib",
      "target": "lib/supabase/middleware.ts"
    },
    {
      "path": "registry/app-sidebar/hooks/use-current-user-name.tsx",
      "content": "import { createClient } from '@/lib/supabase/client'\nimport { useEffect, useState } from 'react'\n\nexport const useCurrentUserName = () => {\n  const [name, setName] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchProfileName = async () => {\n      const { data, error } = await createClient().auth.getSession()\n      if (error) {\n        console.error(error)\n      }\n\n      setName(data.session?.user.user_metadata.full_name ?? 'Anonymous')\n    }\n\n    fetchProfileName()\n  }, [])\n\n  return name || 'Anonymous'\n}",
      "type": "registry:hook",
      "target": "hooks/use-current-user-name.tsx"
    },
    {
      "path": "registry/app-sidebar/hooks/use-current-user-email.tsx",
      "content": "import { createClient } from '@/lib/supabase/client'\nimport { useEffect, useState } from 'react'\n\nexport const useCurrentUserEmail = () => {\n  const [email, setEmail] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchProfileEmail = async () => {\n      const { data, error } = await createClient().auth.getSession()\n      if (error) {\n        console.error(error)\n      }\n\n      setEmail(data.session?.user.email ?? 'anon@email.com')\n    }\n\n    fetchProfileEmail()\n  }, [])\n\n  return email || 'anon@email.com'\n}",
      "type": "registry:hook",
      "target": "hooks/use-current-user-email.tsx"
    },
    {
      "path": "registry/app-sidebar/hooks/use-current-user-image.tsx",
      "content": "import { createClient } from '@/lib/supabase/client'\nimport { useEffect, useState } from 'react'\n\nexport const useCurrentUserImage = () => {\n  const [image, setImage] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchUserImage = async () => {\n      const { data, error } = await createClient().auth.getSession()\n      if (error) {\n        console.error(error)\n      }\n\n      setImage(data.session?.user.user_metadata.avatar_url ?? null)\n    }\n    fetchUserImage()\n  }, [])\n\n  return image\n}",
      "type": "registry:hook",
      "target": "hooks/use-current-user-image.tsx"
    },
    {
      "path": "registry/app-sidebar/components/current-user-avatar.tsx",
      "content": "'use client'\n\nimport { useCurrentUserImage } from '@/hooks/use-current-user-image'\nimport { useCurrentUserName } from '@/hooks/use-current-user-name'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Ghost } from 'lucide-react'\n\nexport const CurrentUserAvatar = () => {\n  const profileImage = useCurrentUserImage()\n  const name = useCurrentUserName()\n  const initials = name\n    ?.split(' ')\n    ?.map((word) => word[0])\n    ?.join('')\n    ?.toUpperCase()\n\n  // Show ghost icon for anonymous users\n  const isAnonymous = name === 'Anonymous'\n\n  return (\n    <Avatar className=\"h-8 w-8 rounded-lg\">\n      {profileImage && <AvatarImage src={profileImage} alt={initials} />}\n      <AvatarFallback className=\"rounded-lg\">\n        {isAnonymous ? (\n          <Ghost className=\"h-4 w-4 text-muted-foreground\" />\n        ) : (\n          initials\n        )}\n      </AvatarFallback>\n    </Avatar>\n  )\n}",
      "type": "registry:component",
      "target": "components/current-user-avatar.tsx"
    },
    {
      "path": "registry/app-sidebar/components/auth-button.tsx",
      "content": "\"use client\"\n\nimport {\n  ChevronsUpDown,\n  Laptop2,\n  LogIn,\n  LogOut,\n  Moon,\n  Sun,\n} from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\"\nimport { CurrentUserAvatar } from \"@/components/current-user-avatar\"\nimport { useCurrentUserName } from \"@/hooks/use-current-user-name\"\nimport { useCurrentUserEmail } from \"@/hooks/use-current-user-email\"\n\nexport function AuthButton() {\n  const { isMobile } = useSidebar()\n  const { theme, setTheme } = useTheme()\n  const userName = useCurrentUserName()\n  const userEmail = useCurrentUserEmail()\n\n  // Check if user is authenticated\n  const isAuthenticated = userName !== 'Anonymous'\n\n  // Get icon for current theme\n  const getThemeIcon = (currentTheme: string | undefined) => {\n    switch (currentTheme) {\n      case 'light':\n        return <Sun className=\"size-4 shrink-0 text-muted-foreground\" />\n      case 'dark':\n        return <Moon className=\"size-4 shrink-0 text-muted-foreground\" />\n      case 'system':\n        return <Laptop2 className=\"size-4 shrink-0 text-muted-foreground\" />\n      default:\n        return <Laptop2 className=\"size-4 shrink-0\" />\n    }\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <CurrentUserAvatar />\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{userName}</span>\n                <span className=\"truncate text-xs\">{userEmail}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <CurrentUserAvatar />\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-medium\">{userName}</span>\n                  <span className=\"truncate text-xs\">{userEmail}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n          <DropdownMenuSub>\n            <DropdownMenuSubTrigger className=\"flex items-center gap-2 justify-between\">\n              {getThemeIcon(theme)}\n              <span>Theme</span>\n            </DropdownMenuSubTrigger>\n            <DropdownMenuPortal>\n              <DropdownMenuSubContent className=\"w-[12rem]\">\n                <DropdownMenuRadioGroup value={theme} onValueChange={setTheme}>\n                  <DropdownMenuRadioItem value=\"light\" className=\"flex items-center gap-2 justify-between\"><span>Light</span> <Sun className=\"size-4 shrink-0 text-muted-foreground\" /></DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem value=\"dark\" className=\"flex items-center gap-2 justify-between\"><span>Dark</span> <Moon className=\"size-4 shrink-0 text-muted-foreground\" /></DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem value=\"system\" className=\"flex items-center gap-2 justify-between\"><span>System</span> <Laptop2 className=\"size-4 shrink-0 text-muted-foreground\" /></DropdownMenuRadioItem>\n                </DropdownMenuRadioGroup>\n              </DropdownMenuSubContent>\n            </DropdownMenuPortal>\n            </DropdownMenuSub>\n          </DropdownMenuGroup>\n            <DropdownMenuItem>\n              {isAuthenticated ? <LogOut /> : <LogIn />}\n              {isAuthenticated ? 'Log out' : 'Login'}\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/auth-button.tsx"
    },
    {
      "path": "registry/app-sidebar/components/app-sidebar.tsx",
      "content": "\"use client\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\nimport { Building2, Calendar, Presentation, FileText, ListTodo, Plus, Users } from \"lucide-react\"\nimport { SidebarLogo } from \"./app-sidebar-logo\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport Link from \"next/link\"\nimport { AuthButton } from \"@/components/auth-button\"\n\nexport function AppSidebar() {\n  const pathname = usePathname()\n\n  const handleCreateMeeting = () => {\n    console.log(\"Create meeting clicked\")\n  }\n\n  const handleCreateContact = () => {\n    console.log(\"Create contact clicked\")\n  }\n\n  const handleCreateCompany = () => {\n    console.log(\"Create company clicked\")\n  }\n\n  const handleCreateTask = () => {\n    console.log(\"Create task clicked\")\n  }\n\n  const handleCreateNote = () => {\n    console.log(\"Create note clicked\")\n  }\n\n  const handleCreateDiagram = () => {\n    console.log(\"Create diagram clicked\")\n  }\n\n  const navigationItems = [\n    {\n      label: \"Diagrams\",\n      href: \"#\",\n      icon: Presentation,\n      action: handleCreateDiagram,\n      actionAriaLabel: \"Create new diagram\",\n    },\n    {\n      label: \"Notes\",\n      href: \"#\",\n      icon: FileText,\n      action: handleCreateNote,\n      actionAriaLabel: \"Create new note\",\n    },\n    {\n      label: \"Tasks\",\n      href: \"#\",\n      icon: ListTodo,\n      action: handleCreateTask,\n      actionAriaLabel: \"Create new task\",\n    },\n    {\n      label: \"Meetings\",\n      href: \"#\",\n      icon: Calendar,\n      action: handleCreateMeeting,\n      actionAriaLabel: \"Create new meeting\",\n    },\n    {\n      label: \"Contacts\",\n      href: \"#\",\n      icon: Users,\n      action: handleCreateContact,\n      actionAriaLabel: \"Create new contact\",\n    },\n    {\n      label: \"Companies\",\n      href: \"#\",\n      icon: Building2,\n      action: handleCreateCompany,\n      actionAriaLabel: \"Create new company\",\n    },\n  ]\n\n\n  return (\n    <>\n      <Sidebar>\n        <SidebarHeader>\n          <SidebarLogo />\n        </SidebarHeader>\n        <SidebarContent className=\"flex flex-col\">\n\n          {/* Navigation */}\n          <SidebarGroup>\n            <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {navigationItems.map((item) => (\n                  <SidebarMenuItem key={item.href}>\n                    <SidebarMenuButton \n                      asChild\n                      className={cn(\n                        \"w-full justify-start\",\n                        pathname.startsWith(item.href)\n                          ? \"bg-muted/50 hover:bg-muted font-semibold\"\n                          : \"hover:bg-muted\"\n                      )}\n                    >\n                      <Link href={item.href}>\n                        <item.icon className=\"size-3.5 mr-2 flex-none text-muted-foreground\" />\n                        <span>{item.label}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                    {item.action && (\n                      <SidebarMenuAction asChild>\n                        <button\n                          onClick={item.action}\n                          className=\"disabled:cursor-not-allowed text-muted-foreground hover:text-foreground\"\n                          aria-label={item.actionAriaLabel}\n                        >\n                            <Plus className=\"size-4 text-muted-foreground\" />\n                        </button>\n                      </SidebarMenuAction>\n                    )}\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n\n        </SidebarContent>\n        <SidebarFooter>\n          <AuthButton />\n        </SidebarFooter>\n      </Sidebar>\n    </>\n  )\n}",
      "type": "registry:component",
      "target": "components/app-sidebar.tsx"
    },
    {
      "path": "registry/app-sidebar/components/app-sidebar-logo.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem } from \"@/components/ui/sidebar\"\nimport { Bird } from \"lucide-react\"\n\nexport function SidebarLogo() {\nreturn (\n  <SidebarMenu>\n    <SidebarMenuItem>\n          <SidebarMenuButton\n            size=\"lg\"\n            className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n          >\n            <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n              <Bird className=\"size-6\" strokeWidth={1.5}/>\n            </div>\n            <div className=\"grid flex-1 text-left text-sm leading-tight\">\n              <span className=\"truncate font-semibold\">My App</span>\n              <span className=\"truncate text-xs\">by me</span>\n            </div>\n          </SidebarMenuButton>\n    </SidebarMenuItem>\n  </SidebarMenu>\n)\n}",
      "type": "registry:component",
      "target": "components/app-sidebar-logo.tsx"
    },
    {
      "path": "registry/app-sidebar/components/ui/dynamic-breadcrumbs.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport { usePathname } from 'next/navigation'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\n\nfunction generateBreadcrumbs(path: string) {\n    // Remove leading and trailing slashes\n    const cleanPath = path.replace(/^\\/+|\\/+$/g, '')\n    \n    // Split the path into segments\n    const segments = cleanPath.split('/')\n    \n    // Generate breadcrumb items\n    const breadcrumbs = segments.map((segment, index) => {\n      // Create the URL for this breadcrumb\n      const url = '/' + segments.slice(0, index + 1).join('/')\n      \n      // Heuristic to check if a segment is likely an ID.\n      // An ID is a segment longer than 8 chars where each part (split by '-')\n      // is either a mix of letters and numbers, or is a hex string.\n      const parts = segment.split('-');\n      const isId =\n        parts.every(\n          (part) =>\n            (/[a-zA-Z]/.test(part) && /[0-9]/.test(part)) ||\n            /^[0-9a-f]+$/i.test(part)\n        ) && segment.length > 8\n\n      let name: string\n      if (isId) {\n        name = `${segment.substring(0, 4)} _ ${segment.substring(\n          segment.length - 4\n        )}`\n      } else {\n        // Capitalize and clean up segment name\n        name = segment\n          .split('-')\n          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ')\n      }\n      \n      return { name, url }\n    })\n  \n    return breadcrumbs\n  }\n\nexport function DynamicBreadcrumbs() {\n  const pathname = usePathname()\n  const breadcrumbs = generateBreadcrumbs(pathname)\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {breadcrumbs.map((crumb, index) => (\n          <React.Fragment key={crumb.url}>\n            <BreadcrumbItem>\n              {index === breadcrumbs.length - 1 ? (\n                <BreadcrumbPage>{crumb.name}</BreadcrumbPage>\n              ) : (\n                <BreadcrumbLink href={crumb.url}>\n                  {crumb.name}\n                </BreadcrumbLink>\n              )}\n            </BreadcrumbItem>\n            {index < breadcrumbs.length - 1 && (\n              <BreadcrumbSeparator />\n            )}\n          </React.Fragment>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  )\n}",
      "type": "registry:component",
      "target": "components/ui/dynamic-breadcrumbs.tsx"
    },
    {
      "path": "registry/app-sidebar/app/(app)/layout.tsx",
      "content": "import { AppSidebar } from \"@/components/app-sidebar\"; \nimport { DynamicBreadcrumbs } from \"@/components/ui/dynamic-breadcrumbs\";\n\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"; \n\nexport default function RootLayout({\nchildren,\n}: Readonly<{\nchildren: React.ReactNode;\n}>) {\nreturn (  \n    <SidebarProvider> \n      <AppSidebar /> \n      <main className=\"flex-1 overflow-auto px-4 grid grid-rows-[auto_1fr] \"> \n        <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12\">\n          <div className=\"flex items-center gap-2 flex-grow\">\n            <SidebarTrigger className=\"-ml-1\" /> \n            <DynamicBreadcrumbs />\n          </div>\n        </header>\n        <div className=\"mb-4 overflow-auto\">\n          {children}\n        </div>\n      </main>\n    </SidebarProvider>  \n  );\n}",
      "type": "registry:file",
      "target": "app/(app)/layout.tsx"
    },
    {
      "path": "registry/app-sidebar/app/(app)/page.tsx",
      "content": "import { Card } from \"@/components/ui/card\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { DynamicBreadcrumbs } from \"@/components/ui/dynamic-breadcrumbs\";\n\n\nexport default function Page() {\n\n  <SidebarProvider> \n  <AppSidebar /> \n  <main className=\"flex-1 overflow-auto px-4 grid grid-rows-[auto_1fr] \"> \n    <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12\">\n      <div className=\"flex items-center gap-2 flex-grow\">\n        <SidebarTrigger className=\"-ml-1\" /> \n        <DynamicBreadcrumbs />\n      </div>\n    </header>\n    <div className=\"mb-4 overflow-auto\">\n    <div className=\"flex flex-col w-full h-full items-center justify-center\">\n    <Card className=\"w-full h-full bg-background\">\n        {/* This is the app content */}\n    </Card>\n  </div>;\n    </div>\n  </main>\n</SidebarProvider>  \n}",
      "type": "registry:page",
      "target": "app/(app)/page.tsx"
    }
  ]
}