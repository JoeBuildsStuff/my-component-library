{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "attio-contact",
  "type": "registry:block",
  "title": "Attio Contact Form",
  "description": "A comprehensive contact form component inspired by Attio's design, featuring drag-and-drop sortable email and phone fields, company selection with search, and popover-based field editing.",
  "dependencies": [
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities"
  ],
  "registryDependencies": [
    "input",
    "button",
    "badge",
    "popover",
    "command",
    "dialog",
    "textarea",
    "label"
  ],
  "files": [
    {
      "path": "registry/attio-contact/components/attio-contact.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { AtSign, BriefcaseBusiness, Building2, GripVertical, IdCard, MapPin, Phone, Pilcrow, Plus, X, Check } from \"lucide-react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from \"@/components/ui/command\";\nimport { cn } from \"@/lib/utils\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport {\n    useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SortableEmailItemProps {\n    id: string;\n    email: string;\n    index: number;\n    onUpdate: (index: number, value: string) => void;\n    onRemove: (index: number) => void;\n}\n\nfunction SortableEmailItem({ id, email, index, onUpdate, onRemove }: SortableEmailItemProps) {\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.5 : 1,\n    };\n\n    return (\n        <div\n            ref={setNodeRef}\n            style={style}\n            className=\"flex flex-row gap-1 items-center\"\n        >\n            <div\n                {...attributes}\n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing\"\n            >\n                <GripVertical className=\"size-4 shrink-0\" strokeWidth={1.5} />\n            </div>\n            <Input \n                className=\"text-xs flex-1\" \n                placeholder=\"email@example.com\" \n                value={email}\n                onChange={(e) => onUpdate(index, e.target.value)}\n            />\n            <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() => onRemove(index)}\n            >\n                <X className=\"size-3\" strokeWidth={1.5} />\n            </Button>\n        </div>\n    );\n}\n\ninterface SortablePhoneItemProps {\n    id: string;\n    phone: string;\n    index: number;\n    onUpdate: (index: number, value: string) => void;\n    onRemove: (index: number) => void;\n}\n\nfunction SortablePhoneItem({ id, phone, index, onUpdate, onRemove }: SortablePhoneItemProps) {\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.5 : 1,\n    };\n\n    return (\n        <div\n            ref={setNodeRef}\n            style={style}\n            className=\"flex flex-row gap-1 items-center\"\n        >\n            <div\n                {...attributes}\n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing\"\n            >\n                <GripVertical className=\"size-4 shrink-0\" strokeWidth={1.5} />\n            </div>\n            <Input \n                className=\"text-xs flex-1\" \n                placeholder=\"+1 (555) 123-4567\" \n                value={phone}\n                onChange={(e) => onUpdate(index, e.target.value)}\n            />\n            <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() => onRemove(index)}\n            >\n                <X className=\"size-3\" strokeWidth={1.5} />\n            </Button>\n        </div>\n    );\n}\n\nexport default function AttioContact() {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [emails, setEmails] = useState<string[]>([]);\n    const [phones, setPhones] = useState<string[]>([]);\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [company, setCompany] = useState(\"\");\n    const [companyOpen, setCompanyOpen] = useState(false);\n    const [addCompanyDialogOpen, setAddCompanyDialogOpen] = useState(false);\n    const [newCompanyName, setNewCompanyName] = useState(\"\");\n    const [newCompanyDescription, setNewCompanyDescription] = useState(\"\");\n\n    // Sample companies list - in a real app this would come from an API\n    const [companies, setCompanies] = useState([\n        \"Acme Corporation\",\n        \"Apple Inc.\",\n        \"Google LLC\",\n        \"Microsoft Corporation\",\n        \"Amazon.com Inc.\",\n        \"Meta Platforms Inc.\",\n        \"Tesla Inc.\",\n        \"Netflix Inc.\",\n        \"Salesforce Inc.\",\n        \"Adobe Inc.\",\n        \"Spotify Technology S.A.\",\n        \"Stripe Inc.\",\n        \"Shopify Inc.\",\n        \"Zoom Video Communications\",\n        \"Slack Technologies\",\n        \"Atlassian Corporation\",\n        \"Dropbox Inc.\",\n        \"Twitter Inc.\",\n        \"LinkedIn Corporation\",\n        \"Uber Technologies Inc.\"\n    ]);\n\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        })\n    );\n\n    const getDisplayName = () => {\n        const fullName = `${firstName} ${lastName}`.trim();\n        return fullName || \"Set Name...\";\n    };\n\n    const getDisplayLocation = () => {\n        const fullLocation = `${city}${city && state ? ', ' : ''}${state}`.trim();\n        return fullLocation || \"Set Primary Location...\";\n    };\n\n    const getDisplayEmails = () => {\n        if (emails.length === 0) return \"Set Email addresses...\";\n        if (emails.length === 1) return emails[0];\n        return (\n            <div className=\"flex items-center gap-2\">\n                <span>{emails[0]}</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                    +{emails.length - 1}\n                </Badge>\n            </div>\n        );\n    };\n\n    const getDisplayPhones = () => {\n        if (phones.length === 0) return \"Set Phone numbers...\";\n        if (phones.length === 1) return phones[0];\n        return (\n            <div className=\"flex items-center gap-2\">\n                <span>{phones[0]}</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                    +{phones.length - 1}\n                </Badge>\n            </div>\n        );\n    };\n\n    const addEmail = () => {\n        setEmails([...emails, \"\"]);\n    };\n\n    const updateEmail = (index: number, value: string) => {\n        const newEmails = [...emails];\n        newEmails[index] = value;\n        setEmails(newEmails);\n    };\n\n    const removeEmail = (index: number) => {\n        const newEmails = emails.filter((_, i) => i !== index);\n        setEmails(newEmails);\n    };\n\n    const addPhone = () => {\n        setPhones([...phones, \"\"]);\n    };\n\n    const updatePhone = (index: number, value: string) => {\n        const newPhones = [...phones];\n        newPhones[index] = value;\n        setPhones(newPhones);\n    };\n\n    const removePhone = (index: number) => {\n        const newPhones = phones.filter((_, i) => i !== index);\n        setPhones(newPhones);\n    };\n\n    const handleDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            setEmails((items) => {\n                const oldIndex = items.findIndex((_, index) => `email-${index}` === active.id);\n                const newIndex = items.findIndex((_, index) => `email-${index}` === over?.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    };\n\n    const handlePhoneDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            setPhones((items) => {\n                const oldIndex = items.findIndex((_, index) => `phone-${index}` === active.id);\n                const newIndex = items.findIndex((_, index) => `phone-${index}` === over?.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    };\n\n    const handleCreateCompany = () => {\n        if (newCompanyName.trim()) {\n            setCompanies([...companies, newCompanyName.trim()]);\n            setCompany(newCompanyName.trim());\n            setNewCompanyName(\"\");\n            setNewCompanyDescription(\"\");\n            setAddCompanyDialogOpen(false);\n            setCompanyOpen(false);\n        }\n    };\n\n    const handleAddCompanyDialogKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === \"Escape\") {\n            setAddCompanyDialogOpen(false);\n            setNewCompanyName(\"\");\n            setNewCompanyDescription(\"\");\n        } else if ((e.metaKey || e.ctrlKey) && e.key === \"Enter\") {\n            e.preventDefault();\n            handleCreateCompany();\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <IdCard className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Name</span>\n                </div>\n                <div className=\"w-full\">\n                <Popover>\n                    <PopoverTrigger className=\"w-full text-left hover:bg-secondary rounded-md py-2 px-2\">\n                        {getDisplayName()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3\" align=\"start\">\n                        <div className=\"flex flex-col gap-4\">\n                            <div className=\"flex flex-col gap-1 \">\n                                <div className=\"text-xs text-muted-foreground\">First Name</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter first name...\" \n                                    value={firstName}\n                                    onChange={(e) => setFirstName(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">Last Name</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter last name..\" \n                                    value={lastName}\n                                    onChange={(e) => setLastName(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <AtSign className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Email</span>\n                </div>\n                <div className=\"w-full\">\n                <Popover>\n                    <PopoverTrigger className=\"w-full text-left hover:bg-secondary rounded-md py-2 px-2\">\n                        {getDisplayEmails()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3\" align=\"start\">\n                        <div className=\"flex flex-col gap-3\">\n                            <DndContext\n                                sensors={sensors}\n                                collisionDetection={closestCenter}\n                                onDragEnd={handleDragEnd}\n                            >\n                                <SortableContext\n                                    items={emails.map((_, index) => `email-${index}`)}\n                                    strategy={verticalListSortingStrategy}\n                                >\n                                    {emails.map((email, index) => (\n                                        <SortableEmailItem\n                                            key={`email-${index}`}\n                                            id={`email-${index}`}\n                                            email={email}\n                                            index={index}\n                                            onUpdate={updateEmail}\n                                            onRemove={removeEmail}\n                                        />\n                                    ))}\n                                </SortableContext>\n                            </DndContext>\n                            <Button \n                                variant=\"secondary\" \n                                className=\"flex flex-row gap-1 items-center justify-start\"\n                                onClick={addEmail}\n                            >\n                                <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                <span className=\"text-xs\">Add Email</span>\n                            </Button>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n    \n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <Pilcrow className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Description</span>\n                </div>\n                <Input className=\"w-full\" placeholder=\"Set Description...\" />\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <Building2 className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Company</span>\n                </div>\n                <div className=\"w-full\">\n                    <Popover open={companyOpen} onOpenChange={setCompanyOpen}>\n                        <PopoverTrigger className=\"w-full text-left hover:bg-secondary rounded-md py-2 px-2\">\n                            {company || \"Set Company...\"}\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-full p-0\" align=\"start\">\n                            <Command>\n                                <CommandInput placeholder=\"Search companies...\" />\n                                <CommandEmpty>No company found.</CommandEmpty>\n                                <CommandGroup className=\"max-h-48 overflow-auto\">\n                                    {companies.map((companyName) => (\n                                        <CommandItem\n                                            key={companyName}\n                                            value={companyName}\n                                            onSelect={(currentValue) => {\n                                                setCompany(currentValue === company ? \"\" : currentValue);\n                                                setCompanyOpen(false);\n                                            }}\n                                        >\n                                            <Check\n                                                className={cn(\n                                                    \"mr-2 h-4 w-4\",\n                                                    company === companyName ? \"opacity-100\" : \"opacity-0\"\n                                                )}\n                                            />\n                                            {companyName}\n                                        </CommandItem>\n                                    ))}\n                                </CommandGroup>\n                                <div className=\"border-t px-1 py-1\">\n                                    <Button \n                                        variant=\"ghost\" \n                                        className=\"w-full justify-start\"\n                                        onClick={() => {\n                                            setCompanyOpen(false);\n                                            setAddCompanyDialogOpen(true);\n                                        }}\n                                    >\n                                        <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                        <span className=\"text-xs\">Add Company</span>\n                                    </Button>\n                                </div>\n                            </Command>\n                        </PopoverContent>\n                    </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <BriefcaseBusiness className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Job title</span>\n                </div>\n                <Input className=\"w-full\" placeholder=\"Set Job title...\" />\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <Phone className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Phone</span>\n                </div>\n                <div className=\"w-full\">\n                <Popover>\n                    <PopoverTrigger className=\"w-full text-left hover:bg-secondary rounded-md py-2 px-2\">\n                        {getDisplayPhones()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3\" align=\"start\">\n                        <div className=\"flex flex-col gap-3\">\n                            <DndContext\n                                sensors={sensors}\n                                collisionDetection={closestCenter}\n                                onDragEnd={handlePhoneDragEnd}\n                            >\n                                <SortableContext\n                                    items={phones.map((_, index) => `phone-${index}`)}\n                                    strategy={verticalListSortingStrategy}\n                                >\n                                    {phones.map((phone, index) => (\n                                        <SortablePhoneItem\n                                            key={`phone-${index}`}\n                                            id={`phone-${index}`}\n                                            phone={phone}\n                                            index={index}\n                                            onUpdate={updatePhone}\n                                            onRemove={removePhone}\n                                        />\n                                    ))}\n                                </SortableContext>\n                            </DndContext>\n                            <Button \n                                variant=\"secondary\" \n                                className=\"flex flex-row gap-1 items-center justify-start\"\n                                onClick={addPhone}\n                            >\n                                <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                <span className=\"text-xs\">Add Phone number</span>\n                            </Button>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <MapPin className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap\">Location</span>\n                </div>\n                <div className=\"w-full\">\n                <Popover>\n                    <PopoverTrigger className=\"w-full text-left hover:bg-secondary rounded-md py-2 px-2\">\n                        {getDisplayLocation()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3\" align=\"start\">\n                        <div className=\"flex flex-col gap-4\">\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">City</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter city...\" \n                                    value={city}\n                                    onChange={(e) => setCity(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">State</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter state...\" \n                                    value={state}\n                                    onChange={(e) => setState(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm w-[10rem]\">\n                    <div className=\"border border-muted-foreground rounded size-4 flex items-center justify-center\">\n                        <span className=\"text-xs\">in</span>\n                    </div>\n                    <span className=\"whitespace-nowrap\">LinkedIn</span>\n                </div>\n                <Input className=\"w-full\" />\n            </div>\n            <Dialog open={addCompanyDialogOpen} onOpenChange={setAddCompanyDialogOpen}>\n                <DialogContent className=\"sm:max-w-[425px]\" onKeyDown={handleAddCompanyDialogKeyDown}>\n                    <DialogHeader>\n                        <DialogTitle>Add New Company</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"company-name\">Name</Label>\n                            <Input\n                                id=\"company-name\"\n                                value={newCompanyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                                placeholder=\"Enter company name...\"\n                                autoFocus\n                            />\n                        </div>\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"company-description\">Description</Label>\n                            <Textarea\n                                id=\"company-description\"\n                                value={newCompanyDescription}\n                                onChange={(e) => setNewCompanyDescription(e.target.value)}\n                                placeholder=\"Enter company description...\"\n                                rows={3}\n                            />\n                        </div>\n                    </div>\n                    <DialogFooter>\n                        <Button \n                            variant=\"outline\" \n                            onClick={() => {\n                                setAddCompanyDialogOpen(false);\n                                setNewCompanyName(\"\");\n                                setNewCompanyDescription(\"\");\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCreateCompany} disabled={!newCompanyName.trim()}>\n                            Create Record\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}",
      "type": "registry:component",
      "target": "components/attio-contact.tsx"
    },
    {
      "path": "registry/attio-contact/app/page.tsx",
      "content": "import AttioContact from \"../components/attio-contact\";\n\nexport default function Page() {\n    return (\n        <div>\n            <AttioContact />\n        </div>\n    );\n}",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}