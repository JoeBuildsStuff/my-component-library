{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:block",
  "title": "Data Table",
  "description": "A comprehensive data table component with advanced filtering, sorting, pagination, row editing, and CRUD operations. Includes support for custom forms and Supabase integration.",
  "dependencies": [
    "@tanstack/react-table",
    "@supabase/supabase-js",
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "sonner",
    "next"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "select",
    "checkbox",
    "badge",
    "popover",
    "command",
    "dropdown-menu",
    "sheet",
    "dialog",
    "alert-dialog",
    "separator",
    "calendar",
    "scroll-area",
    "input-number"
  ],
  "files": [
    {
      "path": "registry/data-table/components/data-table/data-table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter, useSearchParams, usePathname } from \"next/navigation\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  PaginationState,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\nimport { DataTablePagination } from \"./data-table-pagination\"\nimport DataTableToolbar from \"./data-table-toolbar\"\nimport { \n  DataTableState, \n  serializeTableState, \n  updateSearchParams \n} from \"@/lib/data-table\"\n\n/**\n * Props for the DataTable component\n */\nexport interface DataTableProps {\n  /** Array of column definitions that define the table structure */\n  columns: ColumnDef<Record<string, unknown>, unknown>[]\n  /** Array of data objects to display in the table */\n  data: Record<string, unknown>[]\n  /** Initial state for the table including pagination, sorting, filters, etc. */\n  initialState?: Partial<DataTableState>\n  /** Total number of pages for server-side pagination */\n  pageCount?: number\n  /** Function to handle multi deletion of rows */\n  deleteAction?: (ids: string[]) => Promise<{ success: boolean; error?: string; deletedCount?: number }>\n  /** Function to handle creation of new rows */\n  createAction?: (data: Record<string, unknown>) => Promise<{ success: boolean; error?: string }>\n  /** Function to handle updating existing rows */\n  updateActionSingle?: (id: string, data: Record<string, unknown>) => Promise<{ success: boolean; error?: string }>\n  /** Function to handle multi updating of multiple rows */\n  updateActionMulti?: (ids: string[], data: Record<string, unknown>) => Promise<{ success: boolean; error?: string; updatedCount?: number }>\n  /** Custom form component for adding new rows */\n  customAddForm?: React.ComponentType<{\n    onSuccess?: () => void\n    onCancel?: () => void\n    createAction?: (data: Record<string, unknown>) => Promise<{ success: boolean; error?: string }>\n  }>\n  /** Custom form component for editing existing rows */\n  customEditFormSingle?: React.ComponentType<{\n    data: Record<string, unknown>\n    onSuccess?: () => void\n    onCancel?: () => void\n    updateAction?: (id: string, data: Record<string, unknown>) => Promise<{ success: boolean; error?: string }>\n  }>\n  /** Custom form component for multi editing multiple rows */\n  customEditFormMulti?: React.ComponentType<{\n    selectedCount: number\n    onSuccess?: () => void\n    onCancel?: () => void\n    multiUpdateAction?: (ids: string[], data: Record<string, unknown>) => Promise<{ success: boolean; error?: string; updatedCount?: number }>\n  }>\n}\n\ninterface DataTableInternalProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  initialState?: Partial<DataTableState>\n  pageCount?: number\n  deleteAction?: (ids: string[]) => Promise<{ success: boolean; error?: string; deletedCount?: number }>\n  createAction?: (data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  updateActionSingle?: (id: string, data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  updateActionMulti?: (ids: string[], data: Partial<TData>) => Promise<{ success: boolean; error?: string; updatedCount?: number }>\n  customAddForm?: React.ComponentType<{\n    onSuccess?: () => void\n    onCancel?: () => void\n    createAction?: (data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  }>\n  customEditFormSingle?: React.ComponentType<{\n    data: TData\n    onSuccess?: () => void\n    onCancel?: () => void\n    updateAction?: (id: string, data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  }>\n  customEditFormMulti?: React.ComponentType<{\n    selectedCount: number\n    onSuccess?: () => void\n    onCancel?: () => void\n    multiUpdateAction?: (ids: string[], data: Partial<TData>) => Promise<{ success: boolean; error?: string; updatedCount?: number }>\n  }>\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  initialState,\n  pageCount,\n  deleteAction,\n  createAction,\n  updateActionSingle,\n  updateActionMulti,\n  customAddForm,\n  customEditFormSingle,\n  customEditFormMulti,\n}: DataTableInternalProps<TData, TValue>) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  const [sorting, setSorting] = React.useState<SortingState>(\n    initialState?.sorting ?? []\n  )\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    initialState?.columnFilters ?? []\n  )\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(\n    initialState?.columnVisibility ?? {}\n  )\n  const [rowSelection, setRowSelection] = React.useState({})\n  const [pagination, setPagination] = React.useState<PaginationState>(\n    initialState?.pagination ?? { pageIndex: 0, pageSize: 10 }\n  )\n  const [columnOrder, setColumnOrder] = React.useState<string[]>(\n    initialState?.columnOrder ?? []\n  )\n\n  // Sync state changes to URL\n  React.useEffect(() => {\n    const currentState: DataTableState = {\n      pagination,\n      sorting,\n      columnFilters,\n      columnVisibility,\n      columnOrder,\n    }\n\n    const newParams = serializeTableState(currentState)\n    const updatedSearchParams = updateSearchParams(searchParams, newParams)\n    \n    // Only update URL if parameters actually changed\n    const currentUrl = `${pathname}?${searchParams.toString()}`\n    const newUrl = `${pathname}?${updatedSearchParams.toString()}`\n    \n    if (currentUrl !== newUrl) {\n      router.replace(newUrl, { scroll: false })\n    }\n  }, [pagination, sorting, columnFilters, columnVisibility, columnOrder, router, pathname, searchParams])\n\n  const table = useReactTable({\n    data,\n    columns,\n    pageCount: pageCount ?? -1,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: setPagination,\n    onColumnOrderChange: setColumnOrder,\n    enableMultiSort: true,\n    manualPagination: true,\n    manualFiltering: true,\n    manualSorting: true,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination,\n      columnOrder,\n    },\n  })\n\n  return (\n    <div className=\"\">\n        <div className=\"pb-2 \">\n            <DataTableToolbar \n              table={table} \n              deleteAction={deleteAction} \n              createAction={createAction}\n              updateActionSingle={updateActionSingle}\n              updateActionMulti={updateActionMulti}\n              customAddForm={customAddForm}\n              customEditFormSingle={customEditFormSingle}\n              customEditFormMulti={customEditFormMulti}\n            />\n        </div>\n\n        <div className=\"rounded-md border\">\n            <Table>\n                <TableHeader>\n                {table.getHeaderGroups().map((headerGroup) => (\n                    <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                        return (\n                        <TableHead key={header.id}>\n                            {header.isPlaceholder\n                            ? null\n                            : flexRender(\n                                header.column.columnDef.header,\n                                header.getContext()\n                                )}\n                        </TableHead>\n                        )\n                    })}\n                    </TableRow>\n                ))}\n                </TableHeader>\n                <TableBody>\n                {table.getRowModel().rows?.length ? (\n                    table.getRowModel().rows.map((row) => (\n                    <TableRow\n                        key={row.id}\n                        data-state={row.getIsSelected() && \"selected\"}\n                    >\n                        {row.getVisibleCells().map((cell) => (\n                        <TableCell key={cell.id}>\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </TableCell>\n                        ))}\n                    </TableRow>\n                    ))\n                ) : (\n                    <TableRow>\n                    <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                        No results.\n                    </TableCell>\n                    </TableRow>\n                )}\n                </TableBody>\n            </Table>\n        </div>\n        \n        <div className=\"pt-2\">\n            <DataTablePagination table={table} />\n        </div>\n    </div>\n  )\n}",
      "type": "registry:component",
      "target": "components/data-table/data-table.tsx"
    }
  ]
}