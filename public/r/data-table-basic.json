{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-basic",
  "type": "registry:block",
  "title": "Data Table Basic",
  "description": "A simplified data table component with essential features including sorting, pagination, row editing, and CRUD operations. Perfect for basic use cases with Supabase integration.",
  "dependencies": [
    "@tanstack/react-table",
    "@supabase/supabase-js",
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "sonner",
    "next"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "select",
    "checkbox",
    "badge",
    "dropdown-menu",
    "dialog",
    "alert-dialog",
    "label"
  ],
  "files": [
    {
      "path": "registry/data-table-basic/components/data-table.tsx",
      "content": "\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  SortingState,\n  VisibilityState,\n  ColumnFiltersState,\n  ColumnOrderState,\n} from \"@tanstack/react-table\"\nimport { useRouter, useSearchParams, usePathname } from \"next/navigation\"\nimport { useCallback, useState, useEffect } from \"react\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport DataTableToolbar from \"./data-table-toolbar\"\nimport { DataTablePagination } from \"./data-table-pagination\"\nimport { parseSearchParams, serializeTableState, updateSearchParams as updateUrlSearchParams, DataTableState } from \"@/lib/data-table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  searchParams: { [key: string]: string | string[] | undefined }\n  totalCount: number\n  createAction: (data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  updateAction: (id: string, data: Partial<TData>) => Promise<{ success: boolean; error?: string }>\n  deleteAction: (ids: string[]) => Promise<{ success: boolean; error?: string; deletedCount?: number }>\n}\n\nexport function DataTable<TData extends { id: string }, TValue>({\n  columns,\n  data,\n  searchParams,\n  totalCount,\n  createAction,\n  updateAction,\n  deleteAction,\n}: DataTableProps<TData, TValue>) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const currentSearchParams = useSearchParams()\n\n  // Parse initial state from search params\n  const tableState = parseSearchParams(searchParams)\n  const page = (tableState.pagination?.pageIndex ?? 0) + 1 // Convert 0-based to 1-based\n  const pageSize = tableState.pagination?.pageSize ?? 10\n\n  // State management for table features\n  const [sorting, setSorting] = useState<SortingState>(tableState.sorting ?? [])\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(tableState.columnVisibility ?? {})\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>(tableState.columnFilters ?? [])\n  const [columnOrder, setColumnOrder] = useState<ColumnOrderState>(tableState.columnOrder ?? [])\n\n  // Sync state changes to URL\n  useEffect(() => {\n    const currentState: DataTableState = {\n      pagination: {\n        pageIndex: page - 1, // Convert to 0-based\n        pageSize,\n      },\n      sorting,\n      columnFilters,\n      columnVisibility,\n      columnOrder,\n    }\n\n    const newParams = serializeTableState(currentState)\n    const updatedSearchParams = updateUrlSearchParams(currentSearchParams, newParams)\n    \n    // Only update URL if parameters actually changed\n    const currentUrl = `${pathname}?${currentSearchParams.toString()}`\n    const newUrl = `${pathname}?${updatedSearchParams.toString()}`\n    \n    if (currentUrl !== newUrl) {\n      router.replace(newUrl, { scroll: false })\n    }\n  }, [sorting, columnFilters, columnVisibility, columnOrder, page, pageSize, router, pathname, currentSearchParams])\n\n  const updateSearchParams = useCallback(\n    (updates: { page?: number; pageSize?: number }) => {\n      const currentTableState = parseSearchParams(\n        Object.fromEntries(currentSearchParams.entries())\n      )\n      \n      // Update pagination state\n      const newTableState = {\n        pagination: {\n          pageIndex: (updates.page ?? page) - 1, // Convert to 0-based\n          pageSize: updates.pageSize ?? pageSize,\n        },\n        sorting: currentTableState.sorting ?? [],\n        columnFilters: currentTableState.columnFilters ?? [],\n        columnVisibility: currentTableState.columnVisibility ?? {},\n        columnOrder: currentTableState.columnOrder ?? [],\n      }\n      \n      const serializedParams = serializeTableState(newTableState)\n      const newSearchParams = updateUrlSearchParams(currentSearchParams, serializedParams)\n      const url = newSearchParams.toString()\n      router.push(url ? `?${url}` : '?', { scroll: false })\n    },\n    [currentSearchParams, router, page, pageSize]\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    manualPagination: true,\n    manualSorting: true,\n    rowCount: totalCount,\n    enableRowSelection: true,\n    getRowId: (row: TData) => (row as { id: string }).id, // Use the id field as row identifier\n    state: {\n      pagination: {\n        pageIndex: page - 1, // Convert to 0-based index\n        pageSize,\n      },\n      sorting,\n      columnVisibility,\n      columnFilters,\n      columnOrder,\n    },\n    onPaginationChange: (updater) => {\n      const newPagination = typeof updater === 'function' \n        ? updater({ pageIndex: page - 1, pageSize })\n        : updater\n      \n      updateSearchParams({\n        page: newPagination.pageIndex + 1, // Convert back to 1-based\n        pageSize: newPagination.pageSize,\n      })\n    },\n    onSortingChange: setSorting,\n    onColumnVisibilityChange: setColumnVisibility,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnOrderChange: setColumnOrder,\n  })\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"\">\n        <DataTableToolbar \n          table={table} \n          createAction={createAction}\n          updateAction={updateAction}\n          deleteAction={deleteAction}\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"\">\n        <DataTablePagination table={table} />\n      </div>\n    </div>\n  )\n}",
      "type": "registry:component",
      "target": "components/data-table-basic/data-table.tsx"
    }
  ]
}