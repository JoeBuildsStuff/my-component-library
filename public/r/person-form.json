{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "person-form",
  "type": "registry:component",
  "title": "Person Form",
  "description": "A comprehensive form component for managing person/contact information with drag-and-drop email/phone management, company selection, and inline editing capabilities.",
  "dependencies": [
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities"
  ],
  "registryDependencies": [
    "input",
    "button",
    "badge",
    "popover",
    "command",
    "dialog",
    "textarea",
    "label",
    "separator",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/person-form/components/person-form.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { AtSign, BriefcaseBusiness, Building2, GripVertical, IdCard, MapPin, Phone, Pilcrow, Plus, X, Check } from \"lucide-react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from \"@/components/ui/command\";\nimport { cn } from \"@/lib/utils\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport {\n    useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\n\nexport interface PersonFormProps {\n    /**\n     * Initial first name value\n     */\n    initialFirstName?: string;\n    /**\n     * Initial last name value\n     */\n    initialLastName?: string;\n    /**\n     * Initial email addresses\n     */\n    initialEmails?: string[];\n    /**\n     * Initial phone numbers\n     */\n    initialPhones?: string[];\n    /**\n     * Initial city value\n     */\n    initialCity?: string;\n    /**\n     * Initial state value\n     */\n    initialState?: string;\n    /**\n     * Initial company value\n     */\n    initialCompany?: string;\n    /**\n     * Initial description value\n     */\n    initialDescription?: string;\n    /**\n     * Initial LinkedIn profile URL\n     */\n    initialLinkedin?: string;\n    /**\n     * Initial job title value\n     */\n    initialJobTitle?: string;\n    /**\n     * List of available companies for selection\n     */\n    availableCompanies?: string[];\n    /**\n     * Callback fired when form data changes\n     */\n    onChange?: (data: {\n        firstName: string;\n        lastName: string;\n        emails: string[];\n        phones: string[];\n        city: string;\n        state: string;\n        company: string;\n        description: string;\n        linkedin: string;\n        jobTitle: string;\n    }) => void;\n    /**\n     * Custom CSS class name\n     */\n    className?: string;\n}\n\ninterface SortableEmailItemProps {\n    id: string;\n    email: string;\n    index: number;\n    onUpdate: (index: number, value: string) => void;\n    onRemove: (index: number) => void;\n}\n\nfunction SortableEmailItem({ id, email, index, onUpdate, onRemove }: SortableEmailItemProps) {\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.5 : 1,\n    };\n\n    return (\n        <div\n            ref={setNodeRef}\n            style={style}\n            className=\"flex flex-row gap-1 items-center\"\n        >\n            <div\n                {...attributes}\n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing\"\n            >\n                <GripVertical className=\"size-4 shrink-0\" strokeWidth={1.5} />\n            </div>\n            <Input \n                className=\"text-xs flex-1\" \n                placeholder=\"email@example.com\" \n                value={email}\n                onChange={(e) => onUpdate(index, e.target.value)}\n            />\n            <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() => onRemove(index)}\n            >\n                <X className=\"size-3\" strokeWidth={1.5} />\n            </Button>\n        </div>\n    );\n}\n\ninterface SortablePhoneItemProps {\n    id: string;\n    phone: string;\n    index: number;\n    onUpdate: (index: number, value: string) => void;\n    onRemove: (index: number) => void;\n}\n\nfunction SortablePhoneItem({ id, phone, index, onUpdate, onRemove }: SortablePhoneItemProps) {\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.5 : 1,\n    };\n\n    return (\n        <div\n            ref={setNodeRef}\n            style={style}\n            className=\"flex flex-row gap-1 items-center\"\n        >\n            <div\n                {...attributes}\n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing\"\n            >\n                <GripVertical className=\"size-4 shrink-0\" strokeWidth={1.5} />\n            </div>\n            <Input \n                className=\"text-xs flex-1\" \n                placeholder=\"+1 (555) 123-4567\" \n                value={phone}\n                onChange={(e) => onUpdate(index, e.target.value)}\n            />\n            <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() => onRemove(index)}\n            >\n                <X className=\"size-3\" strokeWidth={1.5} />\n            </Button>\n        </div>\n    );\n}\n\nexport default function PersonForm({\n    initialFirstName = \"\",\n    initialLastName = \"\",\n    initialEmails = [],\n    initialPhones = [],\n    initialCity = \"\",\n    initialState = \"\",\n    initialCompany = \"\",\n    initialDescription = \"\",\n    initialLinkedin = \"\",\n    initialJobTitle = \"\",\n    availableCompanies,\n    onChange,\n    className\n}: PersonFormProps = {}) {\n    const [firstName, setFirstName] = useState(initialFirstName);\n    const [lastName, setLastName] = useState(initialLastName);\n    const [emails, setEmails] = useState<string[]>(initialEmails);\n    const [phones, setPhones] = useState<string[]>(initialPhones);\n    const [city, setCity] = useState(initialCity);\n    const [state, setState] = useState(initialState);\n    const [company, setCompany] = useState(initialCompany);\n    const [companyOpen, setCompanyOpen] = useState(false);\n    const [addCompanyDialogOpen, setAddCompanyDialogOpen] = useState(false);\n    const [newCompanyName, setNewCompanyName] = useState(\"\");\n    const [newCompanyDescription, setNewCompanyDescription] = useState(\"\");\n    const [description, setDescription] = useState(initialDescription);\n    const [isDescriptionFocused, setIsDescriptionFocused] = useState(false);\n    const [linkedin, setLinkedin] = useState(initialLinkedin);\n    const [jobTitle, setJobTitle] = useState(initialJobTitle);\n\n    // Sample companies list - in a real app this would come from an API\n    const [companies, setCompanies] = useState(availableCompanies || [\n        \"Acme Corporation\",\n        \"Apple Inc.\",\n        \"Google LLC\",\n        \"Microsoft Corporation\",\n        \"Amazon.com Inc.\",\n        \"Meta Platforms Inc.\",\n        \"Tesla Inc.\",\n        \"Netflix Inc.\",\n        \"Salesforce Inc.\",\n        \"Adobe Inc.\",\n        \"Spotify Technology S.A.\",\n        \"Stripe Inc.\",\n        \"Shopify Inc.\",\n        \"Zoom Video Communications\",\n        \"Slack Technologies\",\n        \"Atlassian Corporation\",\n        \"Dropbox Inc.\",\n        \"Twitter Inc.\",\n        \"LinkedIn Corporation\",\n        \"Uber Technologies Inc.\"\n    ]);\n\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        })\n    );\n\n    // Call onChange callback when form data changes\n    useEffect(() => {\n        if (onChange) {\n            onChange({\n                firstName,\n                lastName,\n                emails,\n                phones,\n                city,\n                state,\n                company,\n                description,\n                linkedin,\n                jobTitle\n            });\n        }\n    }, [firstName, lastName, emails, phones, city, state, company, description, linkedin, jobTitle, onChange]);\n\n    const getDisplayName = () => {\n        const fullName = `${firstName} ${lastName}`.trim();\n        return fullName || \"Set Name...\";\n    };\n\n    const getDisplayLinkedin = () => {\n        if (!linkedin) return \"Set LinkedIn...\";\n        \n        // Extract username from LinkedIn URL\n        const match = linkedin.match(/linkedin\\.com\\/in\\/([^\\/\\?]+)/);\n        if (match) {\n            return <Badge variant=\"blue\" className=\"text-sm\">@{match[1]}</Badge>;\n        }\n        \n        // If it's not a full URL, just display as is\n        return linkedin;\n    };\n\n    const getDisplayLocation = () => {\n        const fullLocation = `${city}${city && state ? ', ' : ''}${state}`.trim();\n        return fullLocation || \"Set Primary Location...\";\n    };\n\n    const getDisplayEmails = () => {\n        const nonEmptyEmails = emails.filter(email => email.trim() !== \"\");\n        if (nonEmptyEmails.length === 0) return \"Set Email addresses...\";\n        if (nonEmptyEmails.length === 1) return <Badge variant=\"blue\" className=\"text-sm\">{nonEmptyEmails[0]}</Badge>;\n        return (\n            <div className=\"flex items-center gap-2\">\n                <Badge variant=\"blue\" className=\"text-sm\">{nonEmptyEmails[0]}</Badge>\n                <Badge variant=\"gray\" className=\"text-xs\">\n                    +{nonEmptyEmails.length - 1}\n                </Badge>\n            </div>\n        );\n    };\n\n    const getDisplayPhones = () => {\n        const nonEmptyPhones = phones.filter(phone => phone.trim() !== \"\");\n        if (nonEmptyPhones.length === 0) return \"Set Phone numbers...\";\n        if (nonEmptyPhones.length === 1) return <Badge variant=\"blue\" className=\"text-sm\">{nonEmptyPhones[0]}</Badge>;\n        return (\n            <div className=\"flex items-center gap-2\">\n                <Badge variant=\"blue\" className=\"text-sm\">{nonEmptyPhones[0]}</Badge>\n                <Badge variant=\"gray\" className=\"text-xs\">\n                    +{nonEmptyPhones.length - 1}\n                </Badge>\n            </div>\n        );\n    };\n\n    const addEmail = () => {\n        setEmails([...emails, \"\"]);\n    };\n\n    const updateEmail = (index: number, value: string) => {\n        const newEmails = [...emails];\n        newEmails[index] = value;\n        setEmails(newEmails);\n    };\n\n    const removeEmail = (index: number) => {\n        const newEmails = emails.filter((_, i) => i !== index);\n        setEmails(newEmails);\n    };\n\n    const addPhone = () => {\n        setPhones([...phones, \"\"]);\n    };\n\n    const updatePhone = (index: number, value: string) => {\n        const newPhones = [...phones];\n        newPhones[index] = value;\n        setPhones(newPhones);\n    };\n\n    const removePhone = (index: number) => {\n        const newPhones = phones.filter((_, i) => i !== index);\n        setPhones(newPhones);\n    };\n\n    const handleDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            setEmails((items) => {\n                const oldIndex = items.findIndex((_, index) => `email-${index}` === active.id);\n                const newIndex = items.findIndex((_, index) => `email-${index}` === over?.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    };\n\n    const handlePhoneDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            setPhones((items) => {\n                const oldIndex = items.findIndex((_, index) => `phone-${index}` === active.id);\n                const newIndex = items.findIndex((_, index) => `phone-${index}` === over?.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    };\n\n    const handleCreateCompany = () => {\n        if (newCompanyName.trim()) {\n            setCompanies([...companies, newCompanyName.trim()]);\n            setCompany(newCompanyName.trim());\n            setNewCompanyName(\"\");\n            setNewCompanyDescription(\"\");\n            setAddCompanyDialogOpen(false);\n            setCompanyOpen(false);\n        }\n    };\n\n    const handleAddCompanyDialogKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === \"Escape\") {\n            setAddCompanyDialogOpen(false);\n            setNewCompanyName(\"\");\n            setNewCompanyDescription(\"\");\n        } else if ((e.metaKey || e.ctrlKey) && e.key === \"Enter\") {\n            e.preventDefault();\n            handleCreateCompany();\n        }\n    };\n\n    return (\n        <div className={cn(\"@container flex flex-col gap-2 text-foreground w-full\", className)}>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <IdCard className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Name</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                <Popover>\n                    <PopoverTrigger className={cn(\n                        \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                        !firstName && !lastName && \"text-muted-foreground/80\"\n                    )}>\n                        {getDisplayName()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3 rounded-xl\" align=\"start\">\n                        <div className=\"flex flex-col gap-4\">\n                            <div className=\"flex flex-col gap-1 \">\n                                <div className=\"text-xs text-muted-foreground\">First Name</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter first name...\" \n                                    value={firstName}\n                                    onChange={(e) => setFirstName(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">Last Name</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter last name..\" \n                                    value={lastName}\n                                    onChange={(e) => setLastName(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <AtSign className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Email</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                <Popover>\n                    <PopoverTrigger className={cn(\n                        \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                        emails.filter(email => email.trim() !== \"\").length === 0 && \"text-muted-foreground/80\"\n                    )}>\n                        {getDisplayEmails()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3 rounded-xl\" align=\"start\">\n                        <div className=\"flex flex-col gap-3\">\n                            <DndContext\n                                sensors={sensors}\n                                collisionDetection={closestCenter}\n                                onDragEnd={handleDragEnd}\n                            >\n                                <SortableContext\n                                    items={emails.map((_, index) => `email-${index}`)}\n                                    strategy={verticalListSortingStrategy}\n                                >\n                                    {emails.map((email, index) => (\n                                        <SortableEmailItem\n                                            key={`email-${index}`}\n                                            id={`email-${index}`}\n                                            email={email}\n                                            index={index}\n                                            onUpdate={updateEmail}\n                                            onRemove={removeEmail}\n                                        />\n                                    ))}\n                                </SortableContext>\n                            </DndContext>\n                            <Button \n                                variant=\"secondary\" \n                                className=\"flex flex-row gap-1 items-center justify-start\"\n                                onClick={addEmail}\n                            >\n                                <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                <span className=\"text-xs\">Add Email</span>\n                            </Button>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n    \n            <div className=\"flex items-start gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] pt-3 text-muted-foreground\">\n                    <Pilcrow className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Description</span>\n                </div>\n                <textarea \n                    className={cn(\n                        \"w-full min-w-0 text-left hover:bg-secondary rounded-md py-2 px-2 resize-none focus:outline-none focus:ring-1 focus:ring-ring min-h-11\",\n                        !isDescriptionFocused && \"overflow-hidden whitespace-nowrap text-ellipsis\"\n                    )}\n                    placeholder=\"Set Description...\"\n                    rows={1}\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    onFocus={(e) => {\n                        setIsDescriptionFocused(true);\n                        setTimeout(() => {\n                            const target = e.target as HTMLTextAreaElement;\n                            target.style.height = 'auto';\n                            target.style.height = Math.max(36, target.scrollHeight) + 'px';\n                        }, 0);\n                    }}\n                    onBlur={(e) => {\n                        setIsDescriptionFocused(false);\n                        const target = e.target as HTMLTextAreaElement;\n                        target.style.height = '36px';\n                    }}\n                    onInput={(e) => {\n                        if (isDescriptionFocused) {\n                            const target = e.target as HTMLTextAreaElement;\n                            target.style.height = 'auto';\n                            target.style.height = Math.max(36, target.scrollHeight) + 'px';\n                        }\n                    }}\n                    style={{\n                        height: isDescriptionFocused ? 'auto' : '36px'\n                    }}\n                />\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <Building2 className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Company</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                    <Popover open={companyOpen} onOpenChange={setCompanyOpen}>\n                        <PopoverTrigger className={cn(\n                            \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                            !company && \"text-muted-foreground/80\"\n                        )}>\n                            {company ? <Badge variant=\"outline\" className=\"text-sm\">{company}</Badge> : \"Set Company...\"}\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-full p-0 rounded-xl\" align=\"start\">\n                            <Command className=\"rounded-xl\">\n                                <CommandInput placeholder=\"Search companies...\" />\n                                <CommandEmpty>No company found.</CommandEmpty>\n                                <CommandGroup className=\"max-h-48 overflow-auto\">\n                                    {companies.map((companyName) => (\n                                        <CommandItem\n                                            key={companyName}\n                                            value={companyName}\n                                            onSelect={(currentValue) => {\n                                                setCompany(currentValue === company ? \"\" : currentValue);\n                                                setCompanyOpen(false);\n                                            }}\n                                        >\n                                            <Check\n                                                className={cn(\n                                                    \"mr-2 h-4 w-4\",\n                                                    company === companyName ? \"opacity-100\" : \"opacity-0\"\n                                                )}\n                                            />\n                                            {companyName}\n                                        </CommandItem>\n                                    ))}\n                                </CommandGroup>\n                                <div className=\"border-t px-1 py-1\">\n                                    <Button \n                                        variant=\"ghost\" \n                                        className=\"w-full justify-start rounded-t-none\"\n                                        onClick={() => {\n                                            setCompanyOpen(false);\n                                            setAddCompanyDialogOpen(true);\n                                        }}\n                                    >\n                                        <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                        <span className=\"text-xs\">Add Company</span>\n                                    </Button>\n                                </div>\n                            </Command>\n                        </PopoverContent>\n                    </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <BriefcaseBusiness className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Title</span>\n                </div>\n                <input \n                    className=\"w-full min-w-0 text-left hover:bg-secondary rounded-md py-2 px-2 truncate\" \n                    placeholder=\"Set Job title...\" \n                    value={jobTitle}\n                    onChange={(e) => setJobTitle(e.target.value)}\n                />\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <Phone className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Phone</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                <Popover>\n                    <PopoverTrigger className={cn(\n                        \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                        phones.filter(phone => phone.trim() !== \"\").length === 0 && \"text-muted-foreground/80\"\n                    )}>\n                        {getDisplayPhones()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3 rounded-xl\" align=\"start\">\n                        <div className=\"flex flex-col gap-3\">\n                            <DndContext\n                                sensors={sensors}\n                                collisionDetection={closestCenter}\n                                onDragEnd={handlePhoneDragEnd}\n                            >\n                                <SortableContext\n                                    items={phones.map((_, index) => `phone-${index}`)}\n                                    strategy={verticalListSortingStrategy}\n                                >\n                                    {phones.map((phone, index) => (\n                                        <SortablePhoneItem\n                                            key={`phone-${index}`}\n                                            id={`phone-${index}`}\n                                            phone={phone}\n                                            index={index}\n                                            onUpdate={updatePhone}\n                                            onRemove={removePhone}\n                                        />\n                                    ))}\n                                </SortableContext>\n                            </DndContext>\n                            <Button \n                                variant=\"secondary\" \n                                className=\"flex flex-row gap-1 items-center justify-start\"\n                                onClick={addPhone}\n                            >\n                                <Plus className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                                <span className=\"text-xs\">Add Phone number</span>\n                            </Button>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <MapPin className=\"size-4 shrink-0\" strokeWidth={1.5} />\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">Location</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                <Popover>\n                    <PopoverTrigger className={cn(\n                        \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                        !city && !state && \"text-muted-foreground/80\"\n                    )}>\n                        {getDisplayLocation()}\n                    </PopoverTrigger>\n                    <PopoverContent className=\"p-3 rounded-xl\" align=\"start\">\n                        <div className=\"flex flex-col gap-4\">\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">City</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter city...\" \n                                    value={city}\n                                    onChange={(e) => setCity(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">State</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"Enter state...\" \n                                    value={state}\n                                    onChange={(e) => setState(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </PopoverContent>\n                </Popover>\n                </div>\n            </div>\n            <div className=\"flex items-center gap-2 justify-between\">\n                <div className=\"flex items-center gap-2 text-sm @max-sm:w-8 w-[10rem] text-muted-foreground\">\n                    <div className=\"border border-muted-foreground rounded size-4 flex items-center justify-center\">\n                        <span className=\"text-xs\">in</span>\n                    </div>\n                    <span className=\"whitespace-nowrap @max-sm:hidden\">LinkedIn</span>\n                </div>\n                <div className=\"w-full min-w-0\">\n                    <Popover>\n                        <PopoverTrigger className={cn(\n                            \"w-full text-left hover:bg-secondary rounded-md py-2 px-2 truncate\",\n                            !linkedin && \"text-muted-foreground/80\"\n                        )}>\n                            {getDisplayLinkedin()}\n                        </PopoverTrigger>\n                        <PopoverContent className=\"p-3 rounded-xl\" align=\"start\">\n                            <div className=\"flex flex-col gap-1\">\n                                <div className=\"text-xs text-muted-foreground\">LinkedIn Profile URL</div>\n                                <Input \n                                    className=\"text-xs\" \n                                    placeholder=\"https://www.linkedin.com/in/username\" \n                                    value={linkedin}\n                                    onChange={(e) => setLinkedin(e.target.value)}\n                                />\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                </div>\n            </div>\n            <Dialog open={addCompanyDialogOpen} onOpenChange={setAddCompanyDialogOpen}>\n                <DialogContent className=\"sm:max-w-[425px]\" onKeyDown={handleAddCompanyDialogKeyDown}>\n                    <DialogHeader>\n                        <DialogTitle>Add New Company</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"company-name\">Name</Label>\n                            <Input\n                                id=\"company-name\"\n                                value={newCompanyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                                placeholder=\"Enter company name...\"\n                                autoFocus\n                            />\n                        </div>\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"company-description\">Description</Label>\n                            <Textarea\n                                id=\"company-description\"\n                                value={newCompanyDescription}\n                                onChange={(e) => setNewCompanyDescription(e.target.value)}\n                                placeholder=\"Enter company description...\"\n                                rows={3}\n                            />\n                        </div>\n                    </div>\n                    <DialogFooter>\n                        <Button \n                            variant=\"outline\" \n                            onClick={() => {\n                                setAddCompanyDialogOpen(false);\n                                setNewCompanyName(\"\");\n                                setNewCompanyDescription(\"\");\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCreateCompany} disabled={!newCompanyName.trim()}>\n                            Create Record\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}",
      "type": "registry:component",
      "target": "components/person-form.tsx"
    },
    {
      "path": "registry/person-form/app/page.tsx",
      "content": "import PersonForm from \"../components/person-form\";\n\nexport default function Page() {\n    return (\n        <div>\n            <PersonForm />\n        </div>\n    );\n}",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}